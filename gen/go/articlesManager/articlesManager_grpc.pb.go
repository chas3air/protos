// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: articlesManager/articlesManager.proto

package amv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ArticlesManager_GetArticles_FullMethodName          = "/github.chas3air.protos.articlesManager.ArticlesManager/GetArticles"
	ArticlesManager_GetArticleById_FullMethodName       = "/github.chas3air.protos.articlesManager.ArticlesManager/GetArticleById"
	ArticlesManager_GetArticlesByOwnerId_FullMethodName = "/github.chas3air.protos.articlesManager.ArticlesManager/GetArticlesByOwnerId"
	ArticlesManager_InsertArticle_FullMethodName        = "/github.chas3air.protos.articlesManager.ArticlesManager/InsertArticle"
	ArticlesManager_UpdateArticle_FullMethodName        = "/github.chas3air.protos.articlesManager.ArticlesManager/UpdateArticle"
	ArticlesManager_DeleteArticle_FullMethodName        = "/github.chas3air.protos.articlesManager.ArticlesManager/DeleteArticle"
)

// ArticlesManagerClient is the client API for ArticlesManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticlesManagerClient interface {
	GetArticles(ctx context.Context, in *GetArticlesRequest, opts ...grpc.CallOption) (*GetArticlesResponse, error)
	GetArticleById(ctx context.Context, in *GetArticleByIdRequest, opts ...grpc.CallOption) (*GetArticleByIdResponse, error)
	GetArticlesByOwnerId(ctx context.Context, in *GetArticlesByOwnerIdRequest, opts ...grpc.CallOption) (*GetArticlesByOwnerIdResponse, error)
	InsertArticle(ctx context.Context, in *InsertArticleRequest, opts ...grpc.CallOption) (*InsertArticleResponse, error)
	UpdateArticle(ctx context.Context, in *UpdateArticleRequest, opts ...grpc.CallOption) (*UpdateArticleResponse, error)
	DeleteArticle(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*DeleteArticleResponse, error)
}

type articlesManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewArticlesManagerClient(cc grpc.ClientConnInterface) ArticlesManagerClient {
	return &articlesManagerClient{cc}
}

func (c *articlesManagerClient) GetArticles(ctx context.Context, in *GetArticlesRequest, opts ...grpc.CallOption) (*GetArticlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArticlesResponse)
	err := c.cc.Invoke(ctx, ArticlesManager_GetArticles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesManagerClient) GetArticleById(ctx context.Context, in *GetArticleByIdRequest, opts ...grpc.CallOption) (*GetArticleByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArticleByIdResponse)
	err := c.cc.Invoke(ctx, ArticlesManager_GetArticleById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesManagerClient) GetArticlesByOwnerId(ctx context.Context, in *GetArticlesByOwnerIdRequest, opts ...grpc.CallOption) (*GetArticlesByOwnerIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArticlesByOwnerIdResponse)
	err := c.cc.Invoke(ctx, ArticlesManager_GetArticlesByOwnerId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesManagerClient) InsertArticle(ctx context.Context, in *InsertArticleRequest, opts ...grpc.CallOption) (*InsertArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertArticleResponse)
	err := c.cc.Invoke(ctx, ArticlesManager_InsertArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesManagerClient) UpdateArticle(ctx context.Context, in *UpdateArticleRequest, opts ...grpc.CallOption) (*UpdateArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateArticleResponse)
	err := c.cc.Invoke(ctx, ArticlesManager_UpdateArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesManagerClient) DeleteArticle(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*DeleteArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteArticleResponse)
	err := c.cc.Invoke(ctx, ArticlesManager_DeleteArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticlesManagerServer is the server API for ArticlesManager service.
// All implementations must embed UnimplementedArticlesManagerServer
// for forward compatibility.
type ArticlesManagerServer interface {
	GetArticles(context.Context, *GetArticlesRequest) (*GetArticlesResponse, error)
	GetArticleById(context.Context, *GetArticleByIdRequest) (*GetArticleByIdResponse, error)
	GetArticlesByOwnerId(context.Context, *GetArticlesByOwnerIdRequest) (*GetArticlesByOwnerIdResponse, error)
	InsertArticle(context.Context, *InsertArticleRequest) (*InsertArticleResponse, error)
	UpdateArticle(context.Context, *UpdateArticleRequest) (*UpdateArticleResponse, error)
	DeleteArticle(context.Context, *DeleteArticleRequest) (*DeleteArticleResponse, error)
	mustEmbedUnimplementedArticlesManagerServer()
}

// UnimplementedArticlesManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArticlesManagerServer struct{}

func (UnimplementedArticlesManagerServer) GetArticles(context.Context, *GetArticlesRequest) (*GetArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticles not implemented")
}
func (UnimplementedArticlesManagerServer) GetArticleById(context.Context, *GetArticleByIdRequest) (*GetArticleByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleById not implemented")
}
func (UnimplementedArticlesManagerServer) GetArticlesByOwnerId(context.Context, *GetArticlesByOwnerIdRequest) (*GetArticlesByOwnerIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticlesByOwnerId not implemented")
}
func (UnimplementedArticlesManagerServer) InsertArticle(context.Context, *InsertArticleRequest) (*InsertArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertArticle not implemented")
}
func (UnimplementedArticlesManagerServer) UpdateArticle(context.Context, *UpdateArticleRequest) (*UpdateArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedArticlesManagerServer) DeleteArticle(context.Context, *DeleteArticleRequest) (*DeleteArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedArticlesManagerServer) mustEmbedUnimplementedArticlesManagerServer() {}
func (UnimplementedArticlesManagerServer) testEmbeddedByValue()                         {}

// UnsafeArticlesManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticlesManagerServer will
// result in compilation errors.
type UnsafeArticlesManagerServer interface {
	mustEmbedUnimplementedArticlesManagerServer()
}

func RegisterArticlesManagerServer(s grpc.ServiceRegistrar, srv ArticlesManagerServer) {
	// If the following call pancis, it indicates UnimplementedArticlesManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ArticlesManager_ServiceDesc, srv)
}

func _ArticlesManager_GetArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesManagerServer).GetArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesManager_GetArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesManagerServer).GetArticles(ctx, req.(*GetArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesManager_GetArticleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesManagerServer).GetArticleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesManager_GetArticleById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesManagerServer).GetArticleById(ctx, req.(*GetArticleByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesManager_GetArticlesByOwnerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticlesByOwnerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesManagerServer).GetArticlesByOwnerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesManager_GetArticlesByOwnerId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesManagerServer).GetArticlesByOwnerId(ctx, req.(*GetArticlesByOwnerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesManager_InsertArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesManagerServer).InsertArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesManager_InsertArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesManagerServer).InsertArticle(ctx, req.(*InsertArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesManager_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesManagerServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesManager_UpdateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesManagerServer).UpdateArticle(ctx, req.(*UpdateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlesManager_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesManagerServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlesManager_DeleteArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesManagerServer).DeleteArticle(ctx, req.(*DeleteArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticlesManager_ServiceDesc is the grpc.ServiceDesc for ArticlesManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticlesManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.chas3air.protos.articlesManager.ArticlesManager",
	HandlerType: (*ArticlesManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArticles",
			Handler:    _ArticlesManager_GetArticles_Handler,
		},
		{
			MethodName: "GetArticleById",
			Handler:    _ArticlesManager_GetArticleById_Handler,
		},
		{
			MethodName: "GetArticlesByOwnerId",
			Handler:    _ArticlesManager_GetArticlesByOwnerId_Handler,
		},
		{
			MethodName: "InsertArticle",
			Handler:    _ArticlesManager_InsertArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _ArticlesManager_UpdateArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _ArticlesManager_DeleteArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "articlesManager/articlesManager.proto",
}
