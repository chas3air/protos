// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: commentsManager/commentsManager.proto

package cmv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommentsManager_GetCommentsByArticleId_FullMethodName = "/github.chas3air.protos.commentsManager.CommentsManager/GetCommentsByArticleId"
	CommentsManager_GetCommentsByOwnerId_FullMethodName   = "/github.chas3air.protos.commentsManager.CommentsManager/GetCommentsByOwnerId"
	CommentsManager_InsertComment_FullMethodName          = "/github.chas3air.protos.commentsManager.CommentsManager/InsertComment"
	CommentsManager_UpdateComment_FullMethodName          = "/github.chas3air.protos.commentsManager.CommentsManager/UpdateComment"
	CommentsManager_DeleteComment_FullMethodName          = "/github.chas3air.protos.commentsManager.CommentsManager/DeleteComment"
)

// CommentsManagerClient is the client API for CommentsManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentsManagerClient interface {
	GetCommentsByArticleId(ctx context.Context, in *GetCommentsByArticleIdRequest, opts ...grpc.CallOption) (*GetCommentsByArticleIdResponse, error)
	GetCommentsByOwnerId(ctx context.Context, in *GetCommentsByOwnerIdRequest, opts ...grpc.CallOption) (*GetCommentsByOwnerIdResponse, error)
	InsertComment(ctx context.Context, in *InsertCommentRequest, opts ...grpc.CallOption) (*InsertCommentResponse, error)
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*UpdateCommentResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
}

type commentsManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentsManagerClient(cc grpc.ClientConnInterface) CommentsManagerClient {
	return &commentsManagerClient{cc}
}

func (c *commentsManagerClient) GetCommentsByArticleId(ctx context.Context, in *GetCommentsByArticleIdRequest, opts ...grpc.CallOption) (*GetCommentsByArticleIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommentsByArticleIdResponse)
	err := c.cc.Invoke(ctx, CommentsManager_GetCommentsByArticleId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsManagerClient) GetCommentsByOwnerId(ctx context.Context, in *GetCommentsByOwnerIdRequest, opts ...grpc.CallOption) (*GetCommentsByOwnerIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommentsByOwnerIdResponse)
	err := c.cc.Invoke(ctx, CommentsManager_GetCommentsByOwnerId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsManagerClient) InsertComment(ctx context.Context, in *InsertCommentRequest, opts ...grpc.CallOption) (*InsertCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertCommentResponse)
	err := c.cc.Invoke(ctx, CommentsManager_InsertComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsManagerClient) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*UpdateCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCommentResponse)
	err := c.cc.Invoke(ctx, CommentsManager_UpdateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsManagerClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, CommentsManager_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentsManagerServer is the server API for CommentsManager service.
// All implementations must embed UnimplementedCommentsManagerServer
// for forward compatibility.
type CommentsManagerServer interface {
	GetCommentsByArticleId(context.Context, *GetCommentsByArticleIdRequest) (*GetCommentsByArticleIdResponse, error)
	GetCommentsByOwnerId(context.Context, *GetCommentsByOwnerIdRequest) (*GetCommentsByOwnerIdResponse, error)
	InsertComment(context.Context, *InsertCommentRequest) (*InsertCommentResponse, error)
	UpdateComment(context.Context, *UpdateCommentRequest) (*UpdateCommentResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	mustEmbedUnimplementedCommentsManagerServer()
}

// UnimplementedCommentsManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommentsManagerServer struct{}

func (UnimplementedCommentsManagerServer) GetCommentsByArticleId(context.Context, *GetCommentsByArticleIdRequest) (*GetCommentsByArticleIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsByArticleId not implemented")
}
func (UnimplementedCommentsManagerServer) GetCommentsByOwnerId(context.Context, *GetCommentsByOwnerIdRequest) (*GetCommentsByOwnerIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsByOwnerId not implemented")
}
func (UnimplementedCommentsManagerServer) InsertComment(context.Context, *InsertCommentRequest) (*InsertCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertComment not implemented")
}
func (UnimplementedCommentsManagerServer) UpdateComment(context.Context, *UpdateCommentRequest) (*UpdateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedCommentsManagerServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedCommentsManagerServer) mustEmbedUnimplementedCommentsManagerServer() {}
func (UnimplementedCommentsManagerServer) testEmbeddedByValue()                         {}

// UnsafeCommentsManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentsManagerServer will
// result in compilation errors.
type UnsafeCommentsManagerServer interface {
	mustEmbedUnimplementedCommentsManagerServer()
}

func RegisterCommentsManagerServer(s grpc.ServiceRegistrar, srv CommentsManagerServer) {
	// If the following call pancis, it indicates UnimplementedCommentsManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommentsManager_ServiceDesc, srv)
}

func _CommentsManager_GetCommentsByArticleId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsByArticleIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsManagerServer).GetCommentsByArticleId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentsManager_GetCommentsByArticleId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsManagerServer).GetCommentsByArticleId(ctx, req.(*GetCommentsByArticleIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsManager_GetCommentsByOwnerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsByOwnerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsManagerServer).GetCommentsByOwnerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentsManager_GetCommentsByOwnerId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsManagerServer).GetCommentsByOwnerId(ctx, req.(*GetCommentsByOwnerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsManager_InsertComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsManagerServer).InsertComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentsManager_InsertComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsManagerServer).InsertComment(ctx, req.(*InsertCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsManager_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsManagerServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentsManager_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsManagerServer).UpdateComment(ctx, req.(*UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsManager_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsManagerServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentsManager_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsManagerServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentsManager_ServiceDesc is the grpc.ServiceDesc for CommentsManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentsManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.chas3air.protos.commentsManager.CommentsManager",
	HandlerType: (*CommentsManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommentsByArticleId",
			Handler:    _CommentsManager_GetCommentsByArticleId_Handler,
		},
		{
			MethodName: "GetCommentsByOwnerId",
			Handler:    _CommentsManager_GetCommentsByOwnerId_Handler,
		},
		{
			MethodName: "InsertComment",
			Handler:    _CommentsManager_InsertComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _CommentsManager_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _CommentsManager_DeleteComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commentsManager/commentsManager.proto",
}
